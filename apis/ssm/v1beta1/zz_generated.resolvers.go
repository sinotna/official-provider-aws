/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1beta1 "github.com/dkb-bank/official-provider-aws/apis/s3/v1beta1"
	errors "github.com/pkg/errors"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ResourceDataSync.
func (mg *ResourceDataSync) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.S3Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3Destination[i3].BucketName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.S3Destination[i3].BucketNameRef,
			Selector:     mg.Spec.ForProvider.S3Destination[i3].BucketNameSelector,
			To: reference.To{
				List:    &v1beta1.BucketList{},
				Managed: &v1beta1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3Destination[i3].BucketName")
		}
		mg.Spec.ForProvider.S3Destination[i3].BucketName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3Destination[i3].BucketNameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.S3Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3Destination[i3].Region),
			Extract:      resource.ExtractParamPath("region", false),
			Reference:    mg.Spec.ForProvider.S3Destination[i3].RegionRef,
			Selector:     mg.Spec.ForProvider.S3Destination[i3].RegionSelector,
			To: reference.To{
				List:    &v1beta1.BucketList{},
				Managed: &v1beta1.Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3Destination[i3].Region")
		}
		mg.Spec.ForProvider.S3Destination[i3].Region = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3Destination[i3].RegionRef = rsp.ResolvedReference

	}

	return nil
}
